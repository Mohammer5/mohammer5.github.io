(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[154],{9090:function(e,n,t){Promise.resolve().then(t.bind(t,4827))},4827:function(e,n,t){"use strict";t.r(n),t.d(n,{Contents:function(){return p}});var i=t(7437),s=t(7374),o=t.n(s);function r(e){let{content:n}=e;return(0,i.jsx)("div",{className:o().markdown,children:(0,i.jsx)(n,{})})}var a=t(2265);let l=a.createContext({});function h(e){let n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n={a:"a",blockquote:"blockquote",br:"br",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...h(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"WIP: Way of working"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["This page is still ",(0,i.jsx)("u",{children:"work in progress"}),"! Some sections and all chapters haven't\nbeen completed yet. Having said that, I think this already paints a somewhat\nclear picture of how I like to work"]})}),"\n",(0,i.jsx)(n.p,{children:"On this page, I'll describe very briefly the ideal development\nsituation I'd like to work in. This will cover code-related topics\nbut also team work and organizing tasks. I have two main focuses:\nFirstly I want to maximize business results, secondly I want to equally\nmaximize employee satisfaction. In my opinion, it's not just possible to\nachieve both, the latter is actually very good for the former! Happy employees\nwork better. Happy employees are happy (this tautology is on purpose!)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#development",children:"Development"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Do not reinvent the wheel"}),"\n",(0,i.jsx)(n.li,{children:"Simplicity is the key"}),"\n",(0,i.jsx)(n.li,{children:"Simple software"}),"\n",(0,i.jsx)(n.li,{children:"Software design"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#management",children:"Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Solution-oriented problem solving"}),"\n",(0,i.jsx)(n.li,{children:"Decisions should be reached through inclusion, The decision-making process must be explicit"}),"\n",(0,i.jsx)(n.li,{children:"Communication is the key"}),"\n",(0,i.jsx)(n.li,{children:"Meetings"}),"\n",(0,i.jsx)(n.li,{children:"Adressing bugs before features"}),"\n",(0,i.jsx)(n.li,{children:"Features and rejecting feature requests"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#tldr",children:"Tl;dr & Link-list"})}),"\n"]}),"\n",(0,i.jsx)("a",{name:"development"}),"\n",(0,i.jsx)(n.h2,{children:"Development"}),"\n",(0,i.jsx)(n.h3,{children:"Do not reinvent the wheel"}),"\n",(0,i.jsxs)(n.p,{children:["Instead of falling into the\n",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Not_invented_here#In_computing",children:'"NIH Syndrom"'}),"\ntrap, we should rely on FOSS solutions for problems that\nhave already been solved. This way we won't have the maintenance burden of\nkeeping the solutions alive or improving them while reaping the benefits of\nimprovements."]}),"\n",(0,i.jsx)(n.p,{children:"Code should only be written for domain-specific problems that can't be\naddressed by using public solutions and then composed with the available tools\nmentioned above. This way, the codebase stays as small as possible, and\nmaintenance remains at a minimum."}),"\n",(0,i.jsx)(n.h3,{children:"Simplicity is the key"}),"\n",(0,i.jsxs)(n.p,{children:["Simplicity is the key to maintainable, scalable, and usable software. This\nprinciple applies not only to code and architecture but also to user\ninterfaces, documentation, and communication. Regarding importance, I follow\nthe ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Worse_is_better#New_Jersey_style",children:'"New Jersey\nStyle"'}),' model\nof software design, at least in parts â€” especially "Simplicity is the most\nimportant consideration in a design." However, I believe that the interface\nshould be as simple as possible, as the user interface must be as accessible as\npossible.']}),"\n",(0,i.jsx)(n.p,{children:"The perception of the software by the target audience can make the difference\nbetween success and losing to a competitor. Therefore, it's necessary to\nprovide an intuitive user interface so that users don't have to think about how\nto accomplish what they want to do. They should be able to just do it."}),"\n",(0,i.jsx)(n.h3,{children:"Simple software"}),"\n",(0,i.jsxs)(n.p,{children:["Simple software is easy to maintain because it is easy to understand how it\nworks and where to find the necessary code. The following text can be found on\n",(0,i.jsx)(n.a,{href:"suckless.org/philosophy",children:"suckless.org/philosophy"})," and has been slightly\nadjusted by me:"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["We focus on simplicity, clarity and frugality. Our philosophy is about\nkeeping things simple, minimal and usable. Unfortunately, the tendency for\ncomplex, error-prone and slow software seems to be prevalent in the\npresent-day software industry. We intend to prove the opposite with our\nsoftware.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://suckless.org/philosophy/",children:"source"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The user interface should be simple enough that it can be used intuitively by\ninexperienced users (e.g., the older demographic), while power users can\nnavigate and interact efficiently and effortlessly."}),"\n",(0,i.jsx)(n.p,{children:"Designing simple and elegant software is far more difficult than allowing\nad-hoc or over-ambitious features to obscure the code over time. However, one\nhas to pay this price to achieve reliability and maintainability. Furthermore,\nminimalism results in reasonable and attainable goals. I strive to maintain\nminimalism and clarity to drive development to completion."}),"\n",(0,i.jsx)(n.h3,{children:"Software design"}),"\n",(0,i.jsxs)(n.p,{children:["Designing the code and its architecture follows the evolutionary design\nphilosophy. It's impossible to know what the code will look like eventually.\nTherefore, it makes sense to sit down with the team and discuss how to\nimplement the next feature only. This will include how the code could\npotentially be refactored before any new code has been written. But that\nrefactoring should only be on a small scale. Bigger refactors should happen on\npurpose at intervals instead of just when an obvious need becomes visible. This\nallows the developers to keep the codebase as simple as possible, as the goal\nof the refactor is to make the code simpler. This could be achieved by adding\nor removing(!) abstractions. I find that a good approach to this kind of\nrefactoring is to reduce coupling and achieve a reasonable level of cohesion.\n",(0,i.jsx)(n.a,{href:"https://thevaluable.dev/cohesion-coupling-guide-examples/",children:"Cohesion and Coupling in Software with\nExamples"})," is a very\ngood article that not only explains the types of coupling and cohesion that\nexist but also how much cohesion should be strived for."]}),"\n",(0,i.jsx)("a",{name:"management"}),"\n",(0,i.jsx)(n.h2,{children:"Management"}),"\n",(0,i.jsx)(n.p,{children:"Managing software development is often thought of as a very straight forward\nprocess. Executes define the strategy, managers plan, UI/UX design, developers\nimplement and, if exiting, QA tests."}),"\n",(0,i.jsx)(n.p,{children:"This simplified version of what software development could look like (and often\nit does look like that) neglects many aspects which ensures that realizing any\npotential is very limited. On the one hand this process excludes those people\nwith detailed knowledge about the software from defining strategy or helping\nplaning: The developers, the UI/UX team and the QA team. On the other hand this\nprocess outright ignores the human aspect of team dynamics. How do we make\ndecisions? How do we ensure that everyone is (or at least can) heard without\nhaving to fear repercussions?"}),"\n",(0,i.jsx)(n.h3,{children:"Solution-oriented problem solving"}),"\n",(0,i.jsx)(n.p,{children:'Many job application have a specific requirement: "Solution-oriented approach".\nThe issue with this term is that it is very vague. From what I\'ve seen so far,\nmost people seem to think that it means you should not think about problems too\nmuch and rather "just" find a solution that works. In practice this often leads\nto poor decisions with solve the problem only on the surface and, even worse,\nintroduce new problems which are often not recognized as they\'re quite hard to\nsee.'}),"\n",(0,i.jsx)(n.p,{children:"The way I see it is that focussing on solutions is often the wrong way. Of\ncourse focusing on the problem only doesn't help either as then there won't\nbe any solution whatsoever. But the trick is to define the problem very\nclearly, then define equally clearly how we can know whether we solved the\nproblem and - if possible - how well. This will serve as a basis for finding\nand triaging different solutions. It is very important though to try to find\nthe potential downsides of every solution to be able to properly evaluate the\ncost/benefit ratio as best as possible."}),"\n",(0,i.jsx)(n.p,{children:"This kind of decision making process takes time, and in my opinion rightfully\nso. Immature decision will cost the business a lot more time and money than the\nextra time spent to find a proper solution."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Problem-oriented_development",children:'"Problem-oriented\ndevelopment"'}),"\nparadigm has some good ideas (I understand that the name is meant to represent\na countermovement to the process I describe above, but I think the name is\nchosen equally poorly):"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Investigating the structure of organisational problems as addressed by\nSoftware Engineering;"}),"\n",(0,i.jsx)(n.li,{children:"Providing formalisms for modelling and representing problems;"}),"\n",(0,i.jsx)(n.li,{children:"Providing guidance and frameworks for problem analysis and decomposition;"}),"\n",(0,i.jsx)(n.li,{children:"Defining techniques for formally justifying solutions (e.g. by associating\nproblem components with solution components);"}),"\n",(0,i.jsx)(n.li,{children:"Supporting knowledge reuse during problem analysis (e.g. through problem\npatterns)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{children:["Decisions should be reached through inclusion,",(0,i.jsx)("br",{}),"The decision-making process must be explicit"]}),"\n",(0,i.jsx)(n.p,{children:'When it comes to business decisions and strategy, those with the best knowledge\nare those at the bottom: the developers, the designers, the researchers, the QA\nteam, etc. They work on the product, they work with the users and they see\nflaws and misdirection directly. A top-down hierarchy (which includes "flat\nhierarchies") all suffer from the same problem:'}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["executives don't set strategy. Not even the CEO sets strategy. Why? Because\nit's an illusion to believe you can enforce a strategy. [...]\ncommand-and-control is not very efficient for knowledge workers, because of\nthe fundamental problem that for any given situation, the people who know the\nmost about it are the people at the bottom, not the people at the top.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://apenwarr.ca/log/?m=201909",children:"source"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If the main objective is to make profit, it is in the interest of the founders,\nowners and shareholders to include everyone in the decision making process and\nit's equally important to define the decision making process explicitly:"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:['[To] strive for a structureless group is as useful, and as\ndeceptive, as to aim at an "objective" news story, "value-free" social science,\nor a "free" economy. A "laissez faire" group is about as realistic as a\n"laissez faire" society; the idea becomes a smokescreen for the strong or the\nlucky to establish unquestioned hegemony over others. [â€¦] For everyone to have\nthe opportunity to be involved in a given group and to participate in its\nactivities the structure must be explicit, not implicit. The rules of\ndecision-making must be open and available to everyone, and this can happen\nonly if they are formalized.',(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://www.jofreeman.com/joreen/tyranny.htm",children:"source"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{children:"Communication is the key"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://agilemanifesto.org/",children:"agile manifesto"})," has four values, of which\nthe first one is:"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Individuals and interactions over processes and tools"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This already indicates how important communication is. One of the original\nauthors of the manifesto even talked about it:"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'When we talked about the Agile Manifesto and laid out the four value\nstatements, with most of those value statements, we didn\'t care very much\nabout what order they came in. But we did have an opinion about the first\none: which is "Individuals and Interactions over Processes and Tools". To me\nthat crystallized a very important part of what agile thinking is about.'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{children:"Meetings"}),"\n",(0,i.jsx)(n.p,{children:"Meetings are expensive and - if not done properly - just a waste of time for\nmost of the participants. It's tricky to do them right and ideally everyone is\neducated about how meetings should be done. Keep them short. When discussions\nstart, stop them, arrange a follow-up meeting, if possible right after the\nmeeting. Takes notes and make them public. Only do meetings when necessary. The\nfollowing quote summarizes it perfectly:"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["The most efficient meeting is no meeting. Let's start with what should be\nobvious by now: sometimes you don't need a meeting at all. For example, status\nupdates almost always are better delivered in some written medium (like email)\nthat can be retained for future reference, and skimmed (or ignored) faster than\npeople can speak. Alas, skipping meetings doesn't solve every problem, or else\nremote work would be a lot easier for everyone.",(0,i.jsx)(n.br,{}),"\n","[...]",(0,i.jsx)(n.br,{}),"\n","Remember: every minute costs multiple person-minutes. Imagine a meeting where a\nmanager is presenting to 9 people. That costs 1+9 person-minutes per minute. A\nsingle one-hour meeting costs you 10 hours of employee salaries! With modern\ntech employees, that adds up really, really fast. You need to spend it wisely.\n[...] As a meeting trends away from a presentation and toward group discussion,\nefficiency drops fast. Almost always, a discussion will be dominated by 2-3\npeople, leaving the others to sit and get bored.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://apenwarr.ca/log/20201123",children:"source"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{children:"Adressing bugs before features"}),"\n",(0,i.jsx)(n.p,{children:"Getting rid of all bugs before features is a ridiculously difficult task. I'd\nwager to say that it's even close to impossible for existing projects that\nhave accumulated hundrets or thousands of bug tickets. That's why it has to be\ndone properly right from the start."}),"\n",(0,i.jsxs)(n.p,{children:["A very promising approach is the\n",(0,i.jsx)(n.a,{href:"https://lostgarden.home.blog/2008/05/20/improving-bug-triage-with-user-pain/",children:"Bug Triage with User Pain"}),'.\nThis approach fits very well into the agile way of working as "',(0,i.jsx)(n.em,{children:"it is about\nempowering people, not managing them"}),'".']}),"\n",(0,i.jsx)(n.h3,{children:"Features and rejecting feature requests"}),"\n",(0,i.jsx)(n.p,{children:"Features should only be added when necessary. The following quote summarizes my\nperspective perfectly:"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["we don't want to blindly add features just because. We want to add them if we\nfeel they are useful and pass the benefit versus cost calculation. A new\nfeature doesn't just mean writing some code and merging it; it also means\ntesting, maintaining and supporting it and considering it whenever another\nnew feature comes up. Also, quite often specific usecases can be realized\nwith different solutions.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/i3/i3/issues/2107#issuecomment-238251240",children:"source"})]}),"\n"]}),"\n",(0,i.jsx)("a",{name:"tldr"}),"\n",(0,i.jsx)(n.h2,{children:"Tl;dr & Link-list"}),"\n",(0,i.jsx)(n.p,{children:"Here are some other articles that I really like and describe my way of\nthinking/working much better than I could replicate here. All links above can\nbe found here, too."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://agilemanifesto.org/",children:"Agile manifesto"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://lostgarden.home.blog/2008/05/20/improving-bug-triage-with-user-pain/",children:"Bug Triage with User Pain"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://thevaluable.dev/cohesion-coupling-guide-examples/",children:"Cohesion and Coupling in Software with Examples"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/i3/i3/issues/2107#issuecomment-238251240",children:"Feature request: maximize command"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://overreacted.io/goodbye-clean-code/",children:"Goodbye, Clean Code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.martinfowler.com/articles/designDead.html",children:"Is Design Dead?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/articles/is-quality-worth-cost.html",children:"Is High Quality Software Worth the Cost?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Not_invented_here#In_computing",children:"NIH Syndrom"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Worse_is_better#New_Jersey_style",children:"New Jersey Style"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/OpportunisticRefactoring.html",children:"OpportunisticRefactoring"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/SelfTestingCode.html",children:"SelfTestingCode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.jofreeman.com/joreen/tyranny.htm",children:"The tyranny of structurelessness"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.deconstructconf.com/2019/dan-abramov-the-wet-codebase",children:"The wet codebase"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://apenwarr.ca/log/20201123",children:"Thoughts you mightn't'a thunk about remote meetings"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://apenwarr.ca/log/?m=201909",children:"What do executives do, anyway?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://mtlynch.io/good-developers-bad-tests/",children:"Why Good Developers Write Bad Unit Tests"})}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...h(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function p(){return(0,i.jsx)(r,{content:c})}},7374:function(e){e.exports={markdown:"markdown_markdown___iZty"}},622:function(e,n,t){"use strict";/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=t(2265),s=Symbol.for("react.element"),o=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,a=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function h(e,n,t){var i,o={},h=null,d=null;for(i in void 0!==t&&(h=""+t),void 0!==n.key&&(h=""+n.key),void 0!==n.ref&&(d=n.ref),n)r.call(n,i)&&!l.hasOwnProperty(i)&&(o[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===o[i]&&(o[i]=n[i]);return{$$typeof:s,type:e,key:h,ref:d,props:o,_owner:a.current}}n.Fragment=o,n.jsx=h,n.jsxs=h},7437:function(e,n,t){"use strict";e.exports=t(622)}},function(e){e.O(0,[971,596,744],function(){return e(e.s=9090)}),_N_E=e.O()}]);