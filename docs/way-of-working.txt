1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/54b8086f99048414.css",{"as":"style"}]
0:["p923YR55mhWoDsEQrXguG",[[["",{"children":["way-of-working",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/54b8086f99048414.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/e4e54e349431bea1.css",{"as":"style"}]
6:I{"id":6685,"chunks":["685:static/chunks/685-a8c11ad368fada34.js","185:static/chunks/app/layout-6917852f99c8baba.js"],"name":"","async":false}
7:I{"id":7767,"chunks":["272:static/chunks/webpack-0b1747d9044932b1.js","971:static/chunks/fd9d1056-a99b58d3cc150217.js","596:static/chunks/596-9d43875837bd0b65.js"],"name":"default","async":false}
8:I{"id":7920,"chunks":["272:static/chunks/webpack-0b1747d9044932b1.js","971:static/chunks/fd9d1056-a99b58d3cc150217.js","596:static/chunks/596-9d43875837bd0b65.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_e66fe9","children":["$","div",null,{"className":"layout_page__ZPT7X","children":[["$","div",null,{"className":"layout_homeLink__CGEGG","children":["$","$L6",null,{"href":"/","children":"Home"}]}],["$","div",null,{"className":"layout_wrapper__zNuca","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","way-of-working","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L9",["$","div",null,{"className":"page_wayOfWorking__MTgpg","children":[["$","h1",null,{"className":"page_title__rsu00","children":"Way of working"}],["$","p",null,{"className":"page_introText__HpEbC","children":"On this page, I'll describe very briefly the ideal development situation I'd like to work in. This will cover code-related topics but also team work and organizing tasks."}],["$","p",null,{"children":"Overall I think that Martin Fowler's blog covers a lot of ideas I align with, here are some examples:"}],["$","ul",null,{"className":"page_referenceList__jLg4_","children":[["$","li",null,{"children":["On evolutionary design: "," ",["$","a",null,{"href":"https://www.martinfowler.com/articles/designDead.html","children":"Is Design Dead?"}]]}],["$","li",null,{"children":["On why software quality matter: "," ",["$","a",null,{"href":"https://martinfowler.com/articles/is-quality-worth-cost.html","children":"Is High Quality Software Worth the Cost?"}]]}],["$","li",null,{"children":["On opportunistic refactoring: "," ",["$","a",null,{"href":"https://martinfowler.com/bliki/OpportunisticRefactoring.html","children":"OpportunisticRefactoring"}]]}],["$","li",null,{"children":["On why testing extensively matters: "," ",["$","a",null,{"href":"https://martinfowler.com/bliki/SelfTestingCode.html","children":"SelfTestingCode"}]]}]]}],["$","p",null,{"children":"Here are some other links that I really like and describe my way of thinking/working, so I don't have to duplicate it here :)"}],["$","ul",null,{"className":"page_referenceList__jLg4_","children":[["$","li",null,{"children":["On reducing software complexity: "," ",["$","a",null,{"href":"https://thevaluable.dev/cohesion-coupling-guide-examples/","children":"Cohesion and Coupling in Software with Examples"}]]}],["$","li",null,{"children":["On why DRY code is not always good: "," ",["$","a",null,{"href":"https://www.deconstructconf.com/2019/dan-abramov-the-wet-codebase","children":"The wet codebase"}]]}],["$","li",null,{"children":["Another article on the same topic: "," ",["$","a",null,{"href":"https://overreacted.io/goodbye-clean-code/","children":"Goodbye, Clean Code"}]]}],["$","li",null,{"children":["On how to write high quality tests: "," ",["$","a",null,{"href":"https://mtlynch.io/good-developers-bad-tests/","children":"Why Good Developers Write Bad Unit Tests"}]]}]]}],["$","h2",null,{"children":"Do not reinvent the wheel"}],["$","p",null,{"children":["Instead of falling into the "," ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Not_invented_here#In_computing","children":"\"NIH Syndrom\""}]," ","trap, we should rely on FOSS solutions for problems that have already been solved. This way we won't have the maintenance burden of keeping the solutions alive or improving them while reaping the benefits of improvements."]}],["$","p",null,{"children":"Code should only be written for domain-specific problems that can't be addressed by using public solutions and then composed with the available tools mentioned above. This way, the codebase stays as small as possible, and maintenance remains at a minimum."}],["$","h2",null,{"children":"Simplicity is the key"}],["$","p",null,{"children":["Simplicity is the key to maintainable, scalable, and usable software. This principle applies not only to code and architecture but also to user interfaces, documentation, and communication. Regarding importance, I follow the"," ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Worse_is_better#New_Jersey_style","children":"\"New Jersey Style\""}]," ","model of software design, at least in parts â€” especially \"Simplicity is the most important consideration in a design.\" However, I believe that the interface should be as simple as possible, as the user interface must be as accessible as possible."]}],["$","p",null,{"children":"The perception of the software by the target audience can make the difference between success and losing to a competitor. Therefore, it's necessary to provide an intuitive user interface so that users don't have to think about how to accomplish what they want to do. They should be able to just do it."}],["$","h3",null,{"children":"Simple software"}],["$","p",null,{"children":["Simple software is easy to maintain because it is easy to understand how it works and where to find the necessary code. The following text can be found on"," ",["$","a",null,{"href":"https://suckless.org/philosophy/","children":"suckless.org/philosophy"}]," "," and has been slightly adjusted by me:"]}],["$","blockquote",null,{"cite":"https://suckless.org/philosophy/","children":"We focus on simplicity, clarity and frugality. Our philosophy is about keeping things simple, minimal and usable. Unfortunately, the tendency for complex, error-prone and slow software seems to be prevalent in the present-day software industry. We intend to prove the opposite with our software."}],["$","p",null,{"children":"The user interface should be simple enough that it can be used intuitively by inexperienced users (e.g., the older demographic), while power users can navigate and interact efficiently and effortlessly."}],["$","p",null,{"children":"Designing simple and elegant software is far more difficult than allowing ad-hoc or over-ambitious features to obscure the code over time. However, one has to pay this price to achieve reliability and maintainability. Furthermore, minimalism results in reasonable and attainable goals. I strive to maintain minimalism and clarity to drive development to completion."}],["$","h4",null,{"children":"Features and rejecting feature requests"}],["$","p",null,{"children":"Features should only be added when necessary. The following quote summarizes my perspective perfectly:"}],["$","blockquote",null,{"children":["we don't want to blindly add features just because. We want to add them if we feel they are useful and pass the benefit versus cost calculation. A new feature doesn't just mean writing some code and merging it; it also means testing, maintaining and supporting it and considering it whenever another new feature comes up. Also, quite often specific usecases can be realized with different solutions.",["$","br",null,{}],"(",["$","a",null,{"href":"https://github.com/i3/i3/issues/2107#issuecomment-238251240","children":"source"}],")"]}],["$","h4",null,{"children":"Software design"}],["$","p",null,{"children":["Designing the code and its architecture follows the evolutionary design philosophy. It's impossible to know what the code will look like eventually. Therefore, it makes sense to sit down with the team and discuss how to implement the next feature only. This will include how the code could potentially be refactored before any new code has been written. But that refactoring should only be on a small scale. Bigger refactors should happen on purpose at intervals instead of just when an obvious need becomes visible. This allows the developers to keep the codebase as simple as possible, as the goal of the refactor is to make the code simpler. This could be achieved by adding or removing(!) abstractions. I find that a good approach to this kind of refactoring is to reduce coupling and achieve a reasonable level of cohesion."," ",["$","a",null,{"href":"Cohesion and Coupling in Software with Examples","children":"Cohesion and Coupling in Software with Examples"}]," "," ","is a very good article that not only explains the types of coupling and cohesion that exist but also how much cohesion should be strived for."]}]]}],null],"segment":"__PAGE__"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e4e54e349431bea1.css","precedence":"next"}]]}],"segment":"way-of-working"},"styles":[]}]}]]}]}]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Mohammer5's Way of Working"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","4",{"name":"next-size-adjust"}]]
9:null
